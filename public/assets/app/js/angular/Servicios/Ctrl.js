!function(){"use strict";var e=angular.module("model",["Services"]);e.controller("Ctrl",["$scope","$http","upload","CSRF_TOKEN","$timeout","Services",function(e,t,n,o,a,r){e.cant_rows="10";e.path=window.location.href,e.load=function(t,n,o){void 0==t&&(t=""),r.Load(t,n,o).then(function(t){e.data_load=t.data,e.to=t.to,e.total=t.total,e.last_page=t.last_page,e.current_page=t.current_page,e.next_page_url=t.next_page_url,e.prev_page_url=t.prev_page_url,null!==e.prev_page_url&&(e.prev_page_url=e.prev_page_url.replace("?page=","")),null!==e.next_page_url&&(e.next_page_url=e.next_page_url.replace("?page=",""))},function(e){})},e.array=["cant_rows","search_text"],e.$watchGroup(e.array,function(t){void 0!=t?e.load(e.search_text,e.cant_rows,1):e.load("",e.cant_rows,1)}),e.init=function(){e.load("",e.cant_rows,1)},e.show=function(t){e.edit_copia={},r.Edit(t).then(function(t){e.edit=t,e.edit_copia.n=t.nombre},function(e){})},e.update=function(t){e.edit_copia.n!=e.edit.nombre?swal({title:"Desea Actualizar?",text:"confirmar si esta seguro de actualizar el registro",type:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Si, Actualizar",allowOutsideClick:!1}).then(function(){var n;n={nombre:e.edit.nombre},r.Update(t,n).then(function(t){e.message(t),$("#edit").modal("hide"),e.init()},function(e){})}):(displayToastr("info","No se realizaron cambios","Notificaci√≥n"),$("#edit").modal("hide"))},e.delete=function(t){swal({title:"Quieres Eliminar?",text:"confirmar si esta seguro de eliminar el registro",type:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Si, Eliminar",allowOutsideClick:!1}).then(function(){r.Delete(t).then(function(t){e.message(t),e.init()},function(e){})})},e.files=[],e.$on("fileSelected",function(t,n){e.$apply(function(){e.files.push(n.file)})}),e.uploadFile=function(){var t=e.icon;n.uploadFile(t).then(function(e){console.log(e)})},e.guardar=function(){swal({title:"Desea Crear?",text:"confirmar si esta seguro de crear el registro",type:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Si, crear",allowOutsideClick:!1}).then(function(){var n=document.getElementById("add"),a=new FormData(n);a.append("_token",o),t({method:"POST",url:base_url+"/api/v1/services",headers:{"Content-Type":void 0},data:a,processData:!1,cache:!1}).success(function(t){e.message(t)}).error(function(t){e.message(t)},function(t){e.message(t)})})},e.clear_input=function(){$("input[name='icon']").val(""),$("input[name='nombre']").val("")},e.message=function(e){202==e.status?displayToastr("warning",e.message,"Campos Requeridos"):200==e.status?displayToastr("success",e.message,"Felicitaciones"):displayToastr("error","Registro ocurrio un error Inesperado","Que paso?")}}]),e.directive("uploaderModel",["$parse",function(e){return{restrict:"A",link:function(t,n,o){n.on("change",function(a){e(o.uploaderModel).assign(t,n[0].files[0])})}}}]),e.service("upload",["$http","$q",function(e,t){this.uploadFile=function(n){var o=t.defer();console.log(base_url);var a=document.getElementById("add"),r=new FormData(a);return r.append("icon",n),e.post(base_url+"/api/v1/services/uploadFile",r,{headers:{"Content-type":void 0},data:r,processData:!1,transformRequest:r}).success(function(e){o.resolve(e),console.log(e)}).error(function(e,t){o.reject(e),console.log(e)})}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
