!function(){"use strict";var e=angular.module("model",["Services","ngSanitize"]);e.controller("Ctrl",["$scope","$http","$timeout","Services",function(e,o,t,a){function n(){s.close()}e.temp=[],e.new_marker=[],e.data_real=[],e.cant_rows="10",e.mapa="full",e.header_search=!0,e.load=function(o,t,n){void 0==o&&(o=""),a.Load(o,t,n).then(function(o){e.data_load=o.data,e.to=o.to,e.total=o.total,e.last_page=o.last_page,e.current_page=o.current_page,e.next_page_url=o.next_page_url,e.prev_page_url=o.prev_page_url,null!==e.prev_page_url&&(e.prev_page_url=e.prev_page_url.replace("?page=","")),null!==e.next_page_url&&(e.next_page_url=e.next_page_url.replace("?page=",""))},function(e){})},e.load_services=function(o,t,n){void 0==o&&(o=""),a.Load_Services(o,t,n).then(function(o){e.data_load_services=o.data,e.to=o.to,e.total=o.total,e.last_page=o.last_page,e.current_page=o.current_page,e.next_page_url=o.next_page_url,e.prev_page_url=o.prev_page_url,null!==e.prev_page_url&&(e.prev_page_url=e.prev_page_url.replace("?page=","")),null!==e.next_page_url&&(e.next_page_url=e.next_page_url.replace("?page=",""))},function(e){})},e.load_services("",10,1),e.init=function(){e.load("",200,1)},e.show_panel=!0,e.show_detalle=!1,e.disable_button=!1;var r,s=null;s=new google.maps.InfoWindow;var l=null,c=null,d=[{featureType:"administrative.country",elementType:"geometry",stylers:[{visibility:"simplified"},{hue:"#ff0000"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.attraction",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.business",elementType:"all",stylers:[{visibility:"off"}]}];e.Map=function(){r=new google.maps.Map(document.getElementById("mapa"),{center:{lat:-12.046629,lng:-77.0214337},zoom:11,styles:d}),s=new google.maps.InfoWindow,google.maps.event.addListener(r,"click",function(){n()}),l=new google.maps.DirectionsRenderer,c=new google.maps.DirectionsService},e.Map(),e.initMap=function(){void 0!=e.search_entidad&&""!=e.search_entidad?e.load(e.search_entidad,5,1):e.load("","0",1)},e.initMap(),e.resize=function(e){google.maps.event.addListenerOnce(e,"bounds_changed",function(){google.maps.event.trigger(e,"resize");e.getBounds()})},e.getKilometros=function(e,o,t,a){function n(e){return e*Math.PI/180}var i=n(t-e),r=n(a-o),s=Math.sin(i/2)*Math.sin(i/2)+Math.cos(n(e))*Math.cos(n(t))*Math.sin(r/2)*Math.sin(r/2);return(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s))*6378.137).toFixed(3)},e.location=function(){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(o){e.posicion_actual={lat:o.coords.latitude,lng:o.coords.longitude};var t="https://maps.googleapis.com/maps/api/geocode/json?latlng="+e.posicion_actual.lat+","+e.posicion_actual.lng+"&sensor=false",a={url:"/assets/app/images/position_actual.png",size:new google.maps.Size(50,50),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,40)},n=new google.maps.Marker({position:e.posicion_actual,map:r,icon:a});$.getJSON(t).done(function(o){e.input_start=o.results[0].formatted_address,e.$digest(),e.indicaciones()}),r.setZoom(18),r.panTo(n.position)},function(){e.handleLocationError(!0,s,r.getCenter())}):e.handleLocationError(!1,s,r.getCenter())},e.toggle_Marker=function(o){if(console.log("Ingreso el ID: "+o),e.id=document.getElementById(o),e.id.checked=!e.id.checked,$("#"+o).is(":checked")){for(var t=e.data_real.length;t--;)if(e.data_real[t].id_services===o){var a="#"+e.data_real[t].id+"-"+o;$(a).show()}else console.log("============="),console.log(e.data_real[t].id_services),console.log("=============");for(var t=0;t<e.new_marker.length;t++)e.new_marker[t].type===o&&e.new_marker[t].setVisible(!0)}else{for(var t=e.data_real.length;t--;)if(e.data_real[t].id_services===o){var a="#"+e.data_real[t].id+"-"+o;$(a).hide()}else console.log("============="),console.log(e.data_real[t].id_services),console.log("=============");for(var n=0;n<e.new_marker.length;n++)e.new_marker[n].type===o&&e.new_marker[n].setVisible(!1)}},e.indicaciones=function(){if(!e.input_start||!e.input_end)return void alert("Start and End addresses are required");var o={origin:e.input_start,destination:e.input_end,travelMode:google.maps.DirectionsTravelMode.DRIVING,unitSystem:google.maps.DirectionsUnitSystem.METRIC,provideRouteAlternatives:!1};c.route(o,function(o,t){t==google.maps.DirectionsStatus.OK?(l.setMap(r),l.setDirections(o),e.origen=o.request.origin,e.destino=o.request.destination,e.indicacion_detalle=!0,e.warning=o.routes[0].warnings[0],e.distancia=o.routes[0].legs[0].distance.text,e.duracion=o.routes[0].legs[0].duration.text,e.ruta_general=o.routes[0].summary,e.ruta_detalle=o.routes[0].legs[0].steps,console.log(o),e.$digest()):(console.log(o,t),alert("There is no directions available between these two points"))})},e.go_position=function(){console.log(e.data_load[i]),$.getJSON(geocoding).done(function(o){var t=o.results[0].formatted_address,a=e.data_load[3].direccion;if(!t||!a)return void alert("Start and End addresses are required");var n={origin:t,destination:a,travelMode:google.maps.DirectionsTravelMode.WALKING,unitSystem:google.maps.DirectionsUnitSystem.METRIC,provideRouteAlternatives:!1};c.route(n,function(e,o){console.log(e),o==google.maps.DirectionsStatus.OK?(l.setMap(r),l.setPanel($("#directions_panel").get(0)),l.setDirections(e)):(console.log(e,o),alert("There is no directions available between these two points"))})})},e.del=function(o){e.data_load.splice(o,1)},e.del_temp=function(o){e.data_real.splice(o,1)},e.setMapOnAll=function(o){for(var t=0;t<e.new_marker.length;t++)e.new_marker[t].setMap(o)},e.clearMarkers=function(){e.setMapOnAll(null)},e.deleteMarkers=function(){e.clearMarkers(),e.new_marker=[]},e.handleLocationError=function(e,o,t){o.setPosition(t),o.setContent(e?"Error: El servicio de Geolocalizacion FallÃ³.":"Error: Your browser doesn't support geolocation.")},e.createMarker=function(o){if(void 0!=e.data_load)for(var t=0;t<e.data_load.length;t++){var a=e.data_load[t],n={lat:parseFloat(a.lat),lng:parseFloat(a.lng)};if(1===a.id_services)var i={url:"//localhost:3000/assets/app/images/banco-color.svg",scaledSize:new google.maps.Size(20,20),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,0),scale:1};else if(2===a.id_services)var i={url:"//localhost:3000/assets/app/images/comisaria-color.svg",scaledSize:new google.maps.Size(20,20),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,0),scale:1};else if(3===a.id_services)var i={url:"//localhost:3000/assets/app/images/hospital-color.svg",scaledSize:new google.maps.Size(20,20),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,0),scale:1};else if(4===a.id_services)var i={url:"//localhost:3000/assets/app/images/bomberos-color.svg",scaledSize:new google.maps.Size(20,20),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,0),scale:1};else console.log("Ocurrio un error inesperado en los ID "+a.id_services+" de Entidades");var r=new google.maps.Marker({position:n,map:o,animation:google.maps.Animation.DROP,draggable:!1,icon:i,type:a.id_services,foto:a.foto,nombre_empresa:a.nombre_empresa,direccion:a.direccion});e.new_marker.push(r),google.maps.event.addListener(r,"click",function(){e.openInfoWindow(this)})}else alert("Ocurrio un error al cargar");s.close()},e.markers_hover=function(o,t,a,n,i,l){var c={};c.lat=parseFloat(o),c.lng=parseFloat(t),s.close(),s=new google.maps.InfoWindow({map:r,maxWidth:200}),s.setPosition(c),s.setContent(['<div class="center globo_ubicacion">','<img width="100%" src="'+a+'">',"<h6>"+n+"</h6>","<p>"+i+"</p>","</div>"].join("")),e.set_google_maps()},e.openInfoWindow=function(o){s.close(),s=new google.maps.InfoWindow({map:r,maxWidth:200});var t=o.position;s.setPosition(t),s.setContent(['<div class="center globo_ubicacion">','<img width="100%" src="'+o.foto+'">',"<h6>"+o.nombre_empresa+"</h6>","<p>"+o.direccion+"</p>","</div>"].join("")),e.set_google_maps()},e.set_google_maps=function(){var e=$(".gm-style-iw"),o=e.next(),t=e.prev();t.children(":nth-child(2)").css({display:"none"}),t.children(":nth-child(4)").css({display:"none"}),e.parent().parent().css({left:"40px"}),t.children(":nth-child(1)").attr("style",function(e,o){return o+"left: 84px !important;"}),t.children(":nth-child(3)").attr("style",function(e,o){return o+"left: 84px !important;"}),t.children(":nth-child(3)").find("div").children().css({"box-shadow":"rgba(0, 0, 0, 0) 0px 1px 6px","z-index":"1"}),t.children(":nth-child(3)").children(":nth-child(1)").find("div").attr("style",function(e,o){return o+"height: 21px !important;width: 10px !important;left:7px !important;"}),t.children(":nth-child(3)").children(":nth-child(2)").find("div").attr("style",function(e,o){return o+"height: 25px !important;width: 9px !important;"}),o.css({display:"none"})},e.show_marker=function(o){e.mapa="detalle",e.hide_search=!0,e.boton_search_global=!1;var t={};t.lat=parseFloat(o.lat),t.lng=parseFloat(o.lng),console.log(t),e.show_detalle=!0,e.detalle=o,e.show_panel=!1;new google.maps.Marker({position:t,map:r,animation:google.maps.Animation.DROP,draggable:!1,type:o.id_services,foto:o.foto,nombre_empresa:o.nombre_empresa,direccion:o.direccion});window.setTimeout(function(){google.maps.event.trigger(r,"resize")},800),r.setZoom(17),r.panTo(t)},e.search_global=function(o){e.mapa="detalle",e.hide_search=!0,e.show_detalle=!1,e.show_panel=!0,e.boton_search_global=!1,e.load(o,10,1),e.createMarker(r)},e.return=function(){e.mapa="full",e.show_detalle=!1,e.show_panel=!0,e.hide_search=!1,e.boton_search_global=!0,window.setTimeout(function(){google.maps.event.trigger(r,"resize")},500)},e.como_llegar=function(o,t){e.show_detalle=!1,e.show_panel=!1,e.hide_search=!0,e.boton_search_global=!1;var a="https://maps.googleapis.com/maps/api/geocode/json?latlng="+o+","+t+"&sensor=false";console.log(a),e.header_search=!1,$.getJSON(a).done(function(o){console.log(o.results[0].formatted_address),e.input_end=o.results[0].formatted_address,e.$digest()})},e.show_detalle_indicaciones=function(){e.detalle_distancia=!0},e.close_indicacion=function(){l.setMap(null),e.mapa="full",e.input_end="",e.input_start="",e.header_search=!0,e.hide_search=!1,e.indicacion_detalle=!1,e.boton_search_global=!0,e.show_detalle=!1,e.show_panel=!0,window.setTimeout(function(){google.maps.event.trigger(r,"resize")},500)}}]),e.directive("tooltip",function(){return{restrict:"A",link:function(e,o,t){$(o).hover(function(){$(o).tooltip("show")},function(){$(o).tooltip("hide")})}}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
