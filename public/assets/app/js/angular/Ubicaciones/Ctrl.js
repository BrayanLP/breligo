!function(){"use strict";var e=angular.module("model",["Services"]);e.controller("Ctrl",["$scope","$http","$timeout","Services",function(e,o,t,n){e.temp=[],e.cant_rows="10",e.load=function(o,t,a){void 0==o&&(o=""),n.Load(o,t,a).then(function(o){e.data_load=o.data,e.temp.push(e.data_load),e.to=o.to,e.total=o.total,e.last_page=o.last_page,e.current_page=o.current_page,e.next_page_url=o.next_page_url,e.prev_page_url=o.prev_page_url,null!==e.prev_page_url&&(e.prev_page_url=e.prev_page_url.replace("?page=","")),null!==e.next_page_url&&(e.next_page_url=e.next_page_url.replace("?page=",""))},function(e){})},e.array=["cant_rows","search_text"],e.$watchGroup(e.array,function(o){console.log(o),void 0!=o?e.load(e.search_text,e.cant_rows,1):e.load("",e.cant_rows,1)}),e.init=function(){e.load("",e.cant_rows,1)},e.show=function(o){e.edit_copia={},n.Edit(o).then(function(o){e.edit=o,e.edit_copia.n=o.nombre,e.edit_copia.d=o.descripcion},function(e){})},e.create=function(){e.edit_copia={};var o;o={nombre:e.create.nombre,descripcion:e.create.descripcion},n.Create(o).then(function(o){console.log(o),$("#create").modal("hide"),e.init()},function(e){})},e.update=function(o){e.edit_copia={};var t;t={nombre:e.edit.nombre,descripcion:e.edit.descripcion},n.Update(o,t).then(function(o){console.log(o),$("#edit").modal("hide"),e.init()},function(e){})},e.delete=function(o){n.Delete(o).then(function(o){console.log(o),e.init()},function(e){})},e.guardar=function(e){n.Create(e).then(function(e){console.log(e)},function(e){})},e.create_bomberos=function(){n.load_bomberos().then(function(o){e.temp_data=[],e.results=o,angular.forEach(e.results,function(o){var t={nombre_temp:o.nombre+" - Bomberos",nombre_empresa:o.nombre,direccion:o.direccion,horario:"Las 24 horas",telefono_1:o.telefonos,correo:o.correo,lat:o.Lat,lng:o.Long,id_services:4,create_at:"2017-05-25 04:54:38",update_at:"2017-05-25 04:54:38"};e.temp_data.push(t),e.guardar(t)}),console.log(e.temp_data)},function(e){})}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
