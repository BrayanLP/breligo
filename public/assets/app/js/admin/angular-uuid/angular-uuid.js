function AngularUUID(){"use strict";function n(n){function r(n,r,e){var u=r&&e||0,a=0;for(r=r||[],n.toLowerCase().replace(/[0-9a-f]{2}/g,function(n){a<16&&(r[u+a++]=v[n])});a<16;)r[u+a++]=0;return r}function e(n,r){var e=r||0,u=d;return u[n[e++]]+u[n[e++]]+u[n[e++]]+u[n[e++]]+"-"+u[n[e++]]+u[n[e++]]+"-"+u[n[e++]]+u[n[e++]]+"-"+u[n[e++]]+u[n[e++]]+"-"+u[n[e++]]+u[n[e++]]+u[n[e++]]+u[n[e++]]+u[n[e++]]+u[n[e++]]}function u(n,r,u){var a=r&&u||0,o=r||[];n=n||{};var t=null!=n.clockseq?n.clockseq:y,f=null!=n.msecs?n.msecs:(new Date).getTime(),l=null!=n.nsecs?n.nsecs:U+1,c=f-p+(l-U)/1e4;if(c<0&&null==n.clockseq&&(t=t+1&16383),(c<0||f>p)&&null==n.nsecs&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");p=f,U=l,y=t,f+=122192928e5;var i=(1e4*(268435455&f)+l)%4294967296;o[a++]=i>>>24&255,o[a++]=i>>>16&255,o[a++]=i>>>8&255,o[a++]=255&i;var s=f/4294967296*1e4&268435455;o[a++]=s>>>8&255,o[a++]=255&s,o[a++]=s>>>24&15|16,o[a++]=s>>>16&255,o[a++]=t>>>8|128,o[a++]=255&t;for(var d=n.node||w,v=0;v<6;v++)o[a+v]=d[v];return r||e(o)}function a(n,r,u){var a=r&&u||0;"string"==typeof n&&(r="binary"===n?new s(16):null,n=null),n=n||{};var t=n.random||(n.rng||o)();if(t[6]=15&t[6]|64,t[8]=63&t[8]|128,r)for(var f=0;f<16;f++)r[a+f]=t[f];return r||e(t)}var o,t,f,l=n.crypto||n.msCrypto;if(!o&&l&&l.getRandomValues)try{var c=new Uint8Array(16);f=o=function(){return l.getRandomValues(c),c},o()}catch(n){}if(!o){var i=new Array(16);t=o=function(){for(var n,r=0;r<16;r++)0==(3&r)&&(n=4294967296*Math.random()),i[r]=n>>>((3&r)<<3)&255;return i},"undefined"!=typeof console&&console.warn&&console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()")}for(var s="function"==typeof Buffer?Buffer:Array,d=[],v={},g=0;g<256;g++)d[g]=(g+256).toString(16).substr(1),v[d[g]]=g;var m=o(),w=[1|m[0],m[1],m[2],m[3],m[4],m[5]],y=16383&(m[6]<<8|m[7]),p=0,U=0,h=a;return h.v1=u,h.v4=a,h.parse=r,h.unparse=e,h.BufferClass=s,h._rng=o,h._mathRNG=t,h._whatwgRNG=f,h}angular.module("angular-uuid",[]).factory("uuid",["$window",n])}"undefined"!=typeof module&&module.exports?module.exports=new AngularUUID:"undefined"!=typeof define&&define.amd?define(function(){return new AngularUUID}):AngularUUID();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
